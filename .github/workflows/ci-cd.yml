name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.cloud-it.com.ar
  IMAGE_NAME: cognito-k3s-webhook

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: admin
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-helm-values:
    needs: build-and-push
    runs-on: [self-hosted, k3s, arm64]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update Helm values with GitHub variables
      run: |
        # Extract the latest tag
        IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep "latest" | head -1 | sed 's/.*://')
        
        # Update values.yaml with GitHub variables
        cat > helm/cognito-webhook/values.yaml << EOF
        # Values injected from GitHub Variables
        app:
          name: cognito-webhook
          title: "${{ vars.APP_TITLE || 'Cognito K3s Webhook' }}"
          description: "${{ vars.APP_DESCRIPTION || 'FastAPI microservice for handling Cognito PostConfirmation events' }}"
          version: "${{ vars.APP_VERSION || '1.0.0' }}"
          port: ${{ vars.APP_PORT || '8000' }}

        image:
          registry: ${{ vars.REGISTRY || 'registry.cloud-it.com.ar' }}
          name: ${{ vars.IMAGE_NAME || 'cognito-k3s-webhook' }}
          tag: ${IMAGE_TAG}
          pullPolicy: Always

        imageCredentials:
          registry: ${{ vars.REGISTRY || 'registry.cloud-it.com.ar' }}
          username: ${{ vars.REGISTRY_USERNAME || 'admin' }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

        deployment:
          replicas: ${{ vars.REPLICAS || '2' }}
          resources:
            requests:
              memory: "${{ vars.MEMORY_REQUEST || '128Mi' }}"
              cpu: "${{ vars.CPU_REQUEST || '100m' }}"
            limits:
              memory: "${{ vars.MEMORY_LIMIT || '256Mi' }}"
              cpu: "${{ vars.CPU_LIMIT || '200m' }}"

        service:
          type: ClusterIP
          port: ${{ vars.SERVICE_PORT || '8000' }}
          targetPort: ${{ vars.SERVICE_TARGET_PORT || '8000' }}

        ingress:
          enabled: true
          host: ${{ vars.INGRESS_HOST || 'webhook-rrhh.cloud-it.com.ar' }}
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.tls: "true"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
          tls:
            enabled: true
            secretName: cognito-webhook-tls

        database:
          host: ${{ vars.DB_HOST || 'postgresql-service.postgresql.svc.cluster.local' }}
          port: ${{ vars.DB_PORT || '5432' }}
          name: ${{ vars.DB_NAME || 'agent' }}
          user: ${{ vars.DB_USER || 'postgres' }}
          password: ${{ secrets.DB_PASSWORD }}
          usersTable: ${{ vars.USERS_TABLE || 'users' }}

        cognito:
          triggerSource: ${{ vars.TRIGGER_SOURCE || 'PostConfirmation_ConfirmSignUp' }}
          defaultProvider: ${{ vars.DEFAULT_PROVIDER || 'google' }}
          testUserPoolId: ${{ vars.TEST_USER_POOL_ID || 'us-east-1_MeClCiUAC' }}
          testRegion: ${{ vars.TEST_REGION || 'us-east-1' }}

        namespace: ${{ vars.NAMESPACE || 'rrhh-agent' }}

        logging:
          level: ${{ vars.LOG_LEVEL || 'info' }}
        EOF
        
        echo "✅ Updated Helm values with GitHub variables"
        echo "📦 Image tag: ${IMAGE_TAG}"
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add helm/cognito-webhook/values.yaml
          git commit -m "🤖 Update Helm values with GitHub variables

          Image: ${{ needs.build-and-push.outputs.image-tag }}
          Digest: ${{ needs.build-and-push.outputs.image-digest }}
          Updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          🚀 Generated with GitHub Actions"
          git push
        fi

  notify-argocd:
    needs: [build-and-push, update-helm-values]
    runs-on: [self-hosted, k3s, arm64]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Trigger ArgoCD Sync
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "📦 Image built: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "🎛️ Helm values updated with GitHub variables"
        echo "🔄 ArgoCD will automatically sync the Helm chart"
        echo "🎯 Monitor deployment in ArgoCD dashboard"